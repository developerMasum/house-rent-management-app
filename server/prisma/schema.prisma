generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id          String      @id @default(uuid())
  email       String      @unique
  phoneNumber String      @unique
  password    String
  role        UserRole
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  admin       Admin?
  houseOwner  HouseOwner?
  manager     Manager?

  @@map("users")
}

model Admin {
  id           String   @id @default(uuid())
  name         String
  profilePhoto String?
  role         UserRole @default(ADMIN)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])

  @@map("admin")
}

model HouseOwner {
  id           String    @id @default(uuid())
  name         String
  profilePhoto String?
  role         UserRole? @default(HOUSEOWNER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id])
  houses       House[]
  managers     Manager[] // Relation field to Manager

  @@map("houseowner")
}

model Manager {
  id           String     @id @default(uuid())
  name         String
  profilePhoto String?
  role         UserRole?  @default(MANAGER)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id])
  houseOwnerId String
  houseOwner   HouseOwner @relation(fields: [houseOwnerId], references: [id])
  house        House?

  @@map("managers")
}

model House {
  id             String   @id @default(uuid())
  name           String
  location       String
  numberOfRooms  Int
  floorCount     Int
  numberOfMeters Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  ownerId String
  owner   HouseOwner @relation(fields: [ownerId], references: [id])

  managerId String?  @unique
  manager   Manager? @relation(fields: [managerId], references: [id])

  rooms Room[]

  @@map("houses")
}

model Room {
  id           String    @id @default(uuid())
  roomNo       Int       @unique
  floorNo      Int
  roomRent     Int
  advancedRent Int
  dueAmount    Int
  isAvailable  Boolean   @default(true)
  // attachedBathRoom Boolean
  vacantFrom   DateTime
  vacantTo     DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  houseId String
  house   House  @relation(fields: [houseId], references: [id])

  // currentTenantId String? @unique
  // currentTenant   Tenant? @relation(fields: [currentTenantId], references: [id])

  electricityBillReadings ElectricityBillReading[]

  payments            Payment[]
  maintenanceRequests MaintenanceRequest[]
  Tenant              Tenant[]

  @@map("rooms")
}

model ElectricityBillReading {
  id        String @id @default(uuid())
  monthName String
  year      Int
  reading   Int
  roomId    String
  room      Room   @relation(fields: [roomId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("electricity_bill_readings")
}

model Tenant {
  id                       String    @id @default(uuid())
  name                     String
  email                    String
  phoneNumber              String
  role                     UserRole? @default(TENANT)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  profilePhoto             String?
  permanentAddress         String
  jobInfo                  String
  familyInfo               String?
  numberOfFamilyMember     Int
  someOneInVillageHomeInfo String
  isDeleted                Boolean   @default(false)
  isMarried                Boolean   @default(false)

  payments            Payment[]
  maintenanceRequests MaintenanceRequest[]
  roomId              String
  room                Room                 @relation(fields: [roomId], references: [id])
  NIDInfo             NIDInfo[]

  @@map("tenant")
}

model NIDInfo {
  id            String   @id @default(uuid())
  note          String?
  nidNumber     String
  nidFrontImage String
  nidBackImage  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@map("nidinfo")
}

model Payment {
  id          String        @id @default(uuid())
  amount      Int
  paymentDate DateTime
  method      String
  invoiceUrl  String
  status      RequestStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  @@map("payments")
}

model MaintenanceRequest {
  id        String        @id @default(uuid())
  request   String
  status    RequestStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  tenant Tenant @relation(fields: [id], references: [id])

  @@map("maintenance_requests")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  ADMIN
  HOUSEOWNER
  MANAGER
  TENANT
}
